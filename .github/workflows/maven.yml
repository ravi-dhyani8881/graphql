# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  repository_dispatch:
    types: [trigger-graphql-code-compile-workflow]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Log event payload to a file
      run: echo '${{ toJson(github.event.client_payload) }}' > event_payload.json


    - name: Print the location and contents of file.json
      run: |
        echo "Location of file.json: $(pwd)/event_payload.json"
        echo "Contents of event_payload.json:"
        cat event_payload.json
        cat ${{ github.workspace }}/event_payload.json
        
    - name: Extract projectName and write to file.json
      run: |
        projectName=$(jq -r '.projectName' event_payload.json)
        echo "Extracted projectName: $projectName"
        echo "$projectName" > file.json
        echo "PROJECT_PAYLOAD=$projectName" >> $GITHUB_ENV

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Checkout the specific branch
      run: |
        git fetch origin ${{ env.BRANCH_NAME }}:${{ env.BRANCH_NAME }}
        git checkout main

    - name: Print Java version
      run: java -version

    - name: Build with Maven
      run: mvn clean install
      working-directory: ${{ env.PROJECT_PAYLOAD }}


    - name: üê≥ Prepare JAR and build Docker image
      run: |

        projectName=$(jq -r '.projectName' event_payload.json)
        organizationID=$(jq -r '.organizationID' event_payload.json)
        subOrganizationID=$(jq -r '.subOrganizationID' event_payload.json)
        enviromentID=$(jq -r '.enviromentID' event_payload.json)
        graphID=$(jq -r '.graphID' event_payload.json)
        version=$(jq -r '.version' event_payload.json)

        # Convert values to lowercase & sanitize (optional)
        image_name="$(echo ${organizationID}-${subOrganizationID}-${enviromentID}-${graphID} | tr '[:upper:]' '[:lower:]' | tr -d ' ' | tr '/' '-')"

         # Define full image name with version tag
        full_image_name="ravi8881/${image_name}:${version}"
        
        JAR_PATH="/home/runner/work/graphql/graphql/$projectName/target"
        JAR_NAME=$(basename $JAR_PATH/*.jar)

        echo "üì¶ Copying $JAR_NAME to local ./target/ directory"

        mkdir -p target
        cp "$JAR_PATH/$JAR_NAME" "./target/"

        docker build -t $full_image_name .

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}


    - name: List Docker images for debugging
      run: docker images

    - name: Push Docker image
      run: |
        projectName=$(jq -r '.projectName' event_payload.json)
        organizationID=$(jq -r '.organizationID' event_payload.json)
        subOrganizationID=$(jq -r '.subOrganizationID' event_payload.json)
        enviromentID=$(jq -r '.enviromentID' event_payload.json)
        graphID=$(jq -r '.graphID' event_payload.json)
        version=$(jq -r '.version' event_payload.json)

        # Convert values to lowercase & sanitize (optional)
        image_name="$(echo ${organizationID}-${subOrganizationID}-${enviromentID}-${graphID} | tr '[:upper:]' '[:lower:]' | tr -d ' ' | tr '/' '-')"

         # Define full image name with version tag
        full_image_name="ravi8881/${image_name}:${version}"

    
        docker push $full_image_name 
